"""
    Changelog

Julia package for managing changelogs. See
https://github.com/JuliaDocs/Changelog.jl/blob/master/README.md for
documentation.
"""
module Changelog

const CHANGELOG_LINK_SEPARATOR = "<!-- Links generated by Changelog.jl -->"

abstract type OutputFormat end
struct Documenter <: OutputFormat end
struct CommonMark <: OutputFormat end

function collect_links(inputfile::String, repo::String)
    # Output mapping tokens to the full URL
    # (e.g. "[#123]" => "https://github.com/JuliaDocs/Documenter.jl/issues/123")
    linkmap = Dict{String, String}()

    # Read the source file and split the content to ignore the list of links
    content = read(inputfile, String)
    content = first(split(content, CHANGELOG_LINK_SEPARATOR))

    # Rule: [abc#XXXX] -> https://github.com/abc/issues/XXXX
    # Description: Replace issue/PR numbers with a link to the default repo
    # Example: [JuliaLang/julia#123] -> https://github.com/JuliaLang/julia/issues/123
    # There is no need to distinguish between PRs and Issues because GitHub redirects.
    for m in eachmatch(r"(?<!\])\[(?<repo>[a-zA-Z0-9/\.]+?)\#(?<id>[0-9]+)\](?![\[\(])", content)
        linkmap[m.match] = "https://github.com/$(m["repo"])/issues/$(m["id"])"
    end

    # Rule: [#XXXX] -> https://github.com/url/issue/XXXX
    # Description: Replace issue/PR numbers with a link to the default repo
    # Example: [#123] -> https://github.com/JuliaDocs/Documenter.jl/issues/123
    # There is no need to distinguish between PRs and Issues because GitHub redirects.
    for m in eachmatch(r"(?<!\])\[\#(?<id>[0-9]+)\](?![\[\(])", content)
        linkmap[m.match] = "https://github.com/$(repo)/issues/$(m["id"])"
    end

    # Rule: [@XXXX] -> https://github.com/XXXX
    # Description: Replace users with a link to their GitHub
    # Example: [@odow] -> https://github.com/odow
    for m in eachmatch(r"(?<!\])\[@(?<id>.+?)\](?![\[\(])", content)
        linkmap[m.match] = "https://github.com/$(m["id"])"
    end

    # Rule: [vX.Y.Z] -> url/releases/tag/vX.Y.Z
    # Description: Replace version headers with a link to the GitHub release
    # Example: [v0.27.0] -> https://github.com/JuliaDocs/Documenter.jl/releases/tag/v0.27.0
    for m in eachmatch(r"(?<!\])(?<token>\[(?<tag>v[0-9]+.[0-9]+.[0-9]+)\])(?![\[\(])", content)
        linkmap[m["token"]] = "https://github.com/$(repo)/releases/tag/$(m["tag"])"
    end

    return linkmap
end

# Rewrite CHANGELOG.md to a Documenter-friendly markdown file
function generate(
    ::Documenter,
    inputfile::String,
    outputfile::String;
    repo::String,
    branch::String = "master",
)
    # Get the map of token to full URL
    linkmap = collect_links(inputfile, repo)

    # Read the source file and split the content to ignore the list of links
    content = read(inputfile, String)
    content = first(split(content, CHANGELOG_LINK_SEPARATOR))

    # Replace all link tokens with full URLs
    for (token, url) in linkmap
        # Generate replacement regex from the token of the form [xxx]: no ] before the
        # token, and no [ or ( after the token
        r = Regex("(?<!\\])" * escape_string(token, "[]") * "(?![\\[\\(])")
        while (m = match(r, content); m !== nothing)
            content = replace(content, r => "$(token)($(url))"; count = 1)
        end
    end

    # For Documenter output we need to inline explicit markdown links, e.g. replace
    #     A [link1] and [another][link2]
    #
    #     [link1]: https://link1
    #     [link2]: https://link2
    # with
    #     A [link1](https://link1) and [another](https://link2)

    # Lookup any explicitly included links
    explicit_links = Dict{String, String}()
    for m in eachmatch(r"(*ANYCRLF)^(?<token>\[\w+\]): (?<url>https:\/\/.*)$"m, content)
        explicit_links[m["token"]] = m["url"]
    end
    # Remove the link lines
    for token in keys(explicit_links)
        content = replace(content, Regex("(*ANYCRLF)^" * escape_string(token, "[]") * ": .*\$\\R?", "m") => "")
    end
    # Insert the links inline
    for (token, url) in explicit_links
        # Check whether this token is of the form [link text][token] and in that case use
        # the original link text
        r = Regex("(?<text>\\[[\\w\\s]+\\])?" * escape_string(token, "[]") * "(?![\\[\\(])")
        while (m = match(r, content); m !== nothing)
            if m["text"] === nothing
                content = replace(content, r => "$(token)($(url))"; count = 1)
            else
                content = replace(content, r => "$(m["text"])($(url))"; count = 1)
            end
        end
    end

    # Header to set EditURL
    header = """
    ```@meta
    EditURL = "https://github.com/$repo/blob/$branch/CHANGELOG.md"
    ```

    """

    # Write it all out
    open(outputfile, "w") do io
        write(io, header)
        write(io, content)
    end

    return
end

function generate(
    ::CommonMark,
    inputfile::String,
    outputfile::String = inputfile;
    repo::String,
    kwargs...,
)
    # Get the map of token to full URL
    linkmap = collect(collect_links(inputfile, repo))

    # Sort releases first, then own issues, then external issues, then other things
    sort!(linkmap; by = function(x)
        k, v = x
        if occursin("/releases/tag/", v)
            # Sort releases by version number
            return (1, VersionNumber(match(r"\[(?<version>.*)\]", k)["version"]))
        elseif occursin("github.com/$(repo)/issues/", v)
            # Sort issues by number
            n = parse(Int, match(r"\[\#(?<id>\d+)\]", k)["id"])
            return (2, n)
        elseif occursin(r"github\.com/.*/issues/", v)
            # Sort by repo name, then issues by number
            m = match(r"\[(?<repo>.*)\#(?<id>\d+)\]", k)
            n = parse(Int, m["id"])
            return (3, m["repo"], n)
        else
            return (4,)
        end
    end)

    # Read the source file and split the content to ignore the list of links
    content = read(inputfile, String)
    content = strip(first(split(content, CHANGELOG_LINK_SEPARATOR)))

    # Write it all out
    open(outputfile, "w") do io
        write(io, content)
        write(io, "\n\n\n")
        write(io, CHANGELOG_LINK_SEPARATOR)
        write(io, "\n\n")
        for (k, v) in linkmap
            println(io, k, ": ", v)
        end
    end

    return
end

end # module
